//https://neetcode.io/problems/products-of-array-discluding-self?list=blind75

//you can also do this in O(1) space complexity if you don't count the resulting array by using 
//right valriable instead of array
/*
        Right pass (running product)
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            res[i] *= right;
            right *= nums[i];
        }
*/

class Solution {
    public int[] productExceptSelf(int[] nums) {

        int lArr[] = new int[nums.length];
        lArr[0] = 1;
        for(int i=1; i<lArr.length; i++) {
            lArr[i] = lArr[i-1] * nums[i-1];
        }

        int rArr[] = new int[nums.length];
        rArr[nums.length-1] = 1;
        for(int i=rArr.length - 2; i>=0; i--) {
            rArr[i] = rArr[i+1] * nums[i+1];
        }
        
        int fArr[] = new int[nums.length];
        for(int i=0; i<fArr.length; i++) {
            fArr[i] = lArr[i] * rArr[i];
        }
        
        return fArr;

    }
}  
