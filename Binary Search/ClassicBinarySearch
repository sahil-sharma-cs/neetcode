/*
Given a sorted array of distinct integers and a target number,
return the index of the target number in the array.
If the target is not present, return -1.

Input: nums = [1, 3, 5, 7, 9, 11], target = 7  
Output: 3  // because nums[3] == 7

Input: nums = [1, 3, 5, 7, 9, 11], target = 4  
Output: -1  // 4 is not in the array
*/

public int findMin(int[] nums, int target) {

        int left = 0;
        int right = nums.length - 1;
        //this is the condition in classic binary search problem when left == right you still check
        while(left <= right) {

            int mid = left + (right-left)/2;

            if(target < nums[mid]) {
                right = mid - 1;
            } else if(target > nums[mid]) {
                left = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
